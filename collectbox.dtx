% \iffalse meta-comment
%
% Copyright (C) 2011 by <+author+> <<+email+>>
% ---------------------------------------------------------------------------
% This work may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in
%   http://www.latex-project.org/lppl.txt
% and version 1.3 or later is part of all distributions of LaTeX
% version 2005/12/01 or later.
%
% This work has the LPPL maintenance status `maintained'.
%
% The Current Maintainer of this work is Martin Scharrer.
%
% This work consists of the files collectbox.dtx and collectbox.ins
% and the derived filebase collectbox.sty.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{collectbox.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[1999/12/01]
%<package>\ProvidesPackage{collectbox}
%<*package>
    [2011/07/18 v0.1 Collect macro arguments as boxes]
%</package>
%
%<*driver>
\documentclass{ydoc}
\usepackage{collectbox}[2011/07/18]
\EnableCrossrefs
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{collectbox.dtx}
  \PrintChanges
  \PrintIndex
\end{document}
%</driver>
% \fi
%
% \CheckSum{96}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v0.1}{2011/07/18}{First release.}
%
% \DoNotIndex{\newcommand,\newenvironment}
%
% \providecommand*{\url}{\texttt}
% \GetFileInfo{collectbox.dtx}
% \title{The \textsf{collectbox} package}
% \author{Martin Scharrer\\ \url{martin@scharrer-online.de}}
% \date{\fileversion~from \filedate}
%
% \maketitle
%
% \begin{abstract}
% This package provides macros to collect and process an macro argument (i.e.\ something which looks like a macro argument)
% as horizontal box instead as a real macro argument.
% These ``arguments'' will be stored like when using \Macro\savebox, \Macro\sbox or the \env{lrbox} environment
% and allow verbatim or other special code.
% Instead of explicit braces also implicit braces in the form of \Macro\bgroup
% and \Macro\egroup are supported. This allows to split the begin and end over different macros or to place them
% in the begin and end code of an environment.
% The provided macro are mainly intended to be used inside other macros or environments.
%
% {\bfseries\color{red}Disclaimer: This is the very first release of this package and the code might still change in future releases.}
% \end{abstract}
%
%
% \section{Dependencies, Compatibility and Installation}
% This package does not depend on any other \LaTeX\ package or class.
% It should be compatible with all versions of \LaTeX (DVI-\LaTeX, pdf\LaTeX, Xe\LaTeX\ and Lua\LaTeX).
% Colored content will be correctly handled.
%
% This package should be (soon) part of the standard distributions TeXLive and MikTeX and can be installed over the 
% provided package manager (i.e.\ TeXLive: |tlmgr install collectcell|).
% This package can be also manually unpacked from |collectbox.dtx| by compiling the file |collectbox.ins| with \LaTeX\ or \TeX.
% This documentation can be created by compiling |collectbox.dtx| using pdf\LaTeX\ in DVI or PDF mode.
% The unpackaged package file |collectbox.sty| should be copied to a newly created directory |$TEXMF/tex/latex/collectbox/| under Linux
% or |%TEXMF%\tex\latex\collectbox\| under MS Windows where |$TEXMF| and |%TEXMF%| represents the local \TeX\ tree.
% The documentation and README file can be copied to |$TEXMF/doc/latex/collectbox/|.
% Some \TeX\ distributions require to update the list of files in the \TeX\ tree, e.g.\ by running |texmf $TEXMF| afterwards.
% MikTeX users can use the graphical interface of the package manager.
%
%
% \section{User Interface}
% The following macros are provided on the user level.
%
% \DescribeMacro\collectbox{<code>}{<box content>}
% \DescribeMacro\collectbox{<code>}\AlsoMacro\bgroup<box content>\AlsoMacro\egroup
% In its basic form this macro is written as \Macro\collectbox{<code>} and collects the following `group' in explicit (|{ .. }|) or implicit (|\bgroup .. \egroup|) braces
% as box (here represented as \MacroArgs{<box content>}). Afterwards the user provided \MacroArgs<code> is executed. This code is processed inside an internal group
% and has access to the just collected content using \Macro\BOXCONTENT and other macros described further below. Usually the code does some calculations and/or modifications
% on the collected box and then typesets it using \Macro\BOXCONTENT.
% In addition to the \DescribeMacro\collectbox{<code>}{<box content>}
%
% An example is
% \codeline{\Macro\collectbox{\AlsoMacro\fbox{\AlsoMacro\BOXCONTENT}}'{\verb+verbatim stuff \space\empty+}'}
% which results in
% \codeline{\collectbox{\fbox{\BOXCONTENT}}{\verb+verbatim stuff \space\empty+}}
%
% \DescribeMacro\collectbox*{<code>}{<box content>}
% \DescribeMacro\collectbox*{<code>}\AlsoMacro\bgroup<box content>\AlsoMacro\egroup
% Because very often the \Macro\BOXCONTENT is simply fed as argument to a macro at the end of the \MacroArgs<code> a star version exists which adds \MacroArgs{\AlsoMacro\BOXCONTENT} automatically 
% to the end of the code.
%
% An above example can be therefore simplified as:
% \codeline{\Macro\collectbox*{\AlsoMacro\fbox}'{\verb+verbatim stuff \space\empty+}'}
% which results in:
% \codeline{\collectbox*{\fbox}{\verb+verbatim stuff \space\empty+}}
%
% \noindent
% Using this macro a \Macro\fbox variant can be defined which reads its content as real box and not as macro argument:
% \codeline{\Macro\newcommand{\AlsoMacro\Fbox}{\AlsoMacro\collectbox*{\AlsoMacro\fbox}}}
%
% \DescribeMacro\collectbox [<code before>]{<code>}[<code after>]{<box content>}
% \DescribeMacro\collectbox [<code before>]{<code>}[<code after>]\AlsoMacro\bgroup<box content>\AlsoMacro\egroup
% \DescribeMacro\collectbox*[<code before>]{<code>}[<code after>]{<box content>}
% \DescribeMacro\collectbox*[<code before>]{<code>}[<code after>]\AlsoMacro\bgroup<box content>\AlsoMacro\egroup
% Finally two optional arguments exists which allow the placement of further code at the beginning and end of the collected box.
% This code is part of the box and is expanded before the main \MacroArgs<code> which is expanded after the box is fully collected.
% In other words \Macro\collectbox!\optionaloff! [<code before>]{<code>}[<code after>]{<box content>} is equivalent to 
% \Macro\collectbox{<code>}{<code before><box content><code after>}, with difference that the first form allows a user defined macro
% to set the before and after code while the box content is provided by the user.
%
% Example of a \Macro\fbox like macro which reads its ``argument'' as box and sets it green first:
% \begin{macroquote}
%  \newcommand!\optionaloff!{\AlsoMacro\GFbox}{\AlsoMacro\collectbox*[\AlsoMacro\color{green}]{\AlsoMacro\fbox}}\\
%  \GFbox{'test $a=4$ \verb|\relax|'}
% \end{macroquote}
% will result in:
% {\newcommand{\GFbox}{\collectbox*[\color{green}]{\fbox}}%
%  \GFbox{test $a=4$ \verb|\relax|}}
%
%
% \DescribeMacro\collectedbox
% This macro represents the box register defined by \Macro\newsavebox\relax which holds the collected box.
% It can be used with the \LaTeX's macro \Macro\usebox{<box register>} or with plain\TeX\ 
% macros like \Macro\box, \Macro\copy, \Macro\unhbox or \Macro\unhcopy.
%
% \DescribeMacro\BOXCONTENT
% This macro is short for \Macro\usebox{\AlsoMacro\collectedbox} and will place the collected box into the document. It can be used multiple times inside \MacroArgs<code>.
%
% \DescribeMacro\width
% \DescribeMacro\height
% \DescribeMacro\depth
% \DescribeMacro\totalheight
% These macros represent the dimension of the collected box and can be used inside \MacroArgs<code>\relax. Here \Macro\height is the height of the box above the baseline
% and \Macro\depth the lengths how far the box is going below the baseline. Both values added together are provides as \Macro\totalheight.
% The box width is given by \Macro\width.
%
%
% \section{Programmers Interface}
%
% For the package author/programmer and more advanced users the following internal macros are provided.
% If used inside a document file they must be wrapped inside \Macro\makeatletter and \Macro\makeatother\relax (outside the macro which uses them).
%
% \DescribeMacro\collectbox@{<code before>}{<code>}{<code after>}{<box content>}
% This macro is the internal form of \Macro\collectbox with the optional arguments replaced by mandatory ones.
% The \Macro\collectbox macro itself uses it after checking for and reading the optional arguments.
% If this macro is to be used in other macros this overhead can be avoided by using the internal form directly.
% Not used optional arguments can be simply kept empty. The star version is not supported by can be easily substituded by 
% manually placing the \MacroArgs{\Macro\BOXCONTENT} at the end of \MacroArgs<code>.
%
% The above example can therefore be written in the faster processed form:
% \begin{macroquote}
%  \makeatletter\\
%  \newcommand!\optionaloff!{\AlsoMacro\GFbox}{\AlsoMacro\collectbox@{\AlsoMacro\color{green}}{\AlsoMacro\fbox}{}}\\
%  \makeatother\\
%  \GFbox{test $a=4$ \verb|\relax|}%
% \end{macroquote}
% which results in:
% {\makeatletter
%  \newcommand{\GFbox}{\collectbox@{\color{green}}{\fbox{\BOXCONTENT}}{}}%
%  \makeatother
%  \tracingall
%  \GFbox{test $a=4$ \verb|\relax|}%
% }
%
%
% \DescribeMacro\@collectbox{<code>}{<box content>}
% This macro is a short version of \Macro\collectbox and only accepts one argument \MacroArgs<code> besides the later \Macro<box content>.
% It is intended for quick version for macros which do not need to insert code before or after the box content.
%
%
% \StopEventually{}
%
% \section{Implementation}
%
% \iffalse
%<*package>
% \fi
%
%
% \begin{macro}{\collectedbox}
% Box register used to store collected box.
%    \begin{macrocode}
\newsavebox\collectedbox
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\collectbox}
% User level interface. Scans for potential star and optional arguments.
%    \begin{macrocode}
\def\collectbox{%
    \@ifstar
        {\collectbox@a{{\BOXCONTENT}}}%
        {\collectbox@a{}}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\collectbox@a}
%    \begin{macrocode}
\def\collectbox@a#1{%
    \@ifnextchar[%
        {\collectbox@b{#1}}%
        {\collectbox@a{#1}[]}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\collectbox@b}
%    \begin{macrocode}
\def\collectbox@b#1[#2]#3{%
    \@ifnextchar[%
        {\collectbox@c{#2}{#3#1}}%
        {\collectbox@c{#2}{#3#1}[]}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\collectbox@c}
%    \begin{macrocode}
\def\collectbox@c#1#2[#3]{%
    \collectbox@{#1}{#2}{#3}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\collectbox@}
% The box is saved using |\setbox|. Color is supported by using |\color@setgroup|.
% A brace group is then opened using |\bgroup| which will replace the opening brace of the 
% ``argument''. The end code is installed in this group using |\aftergroup|.
% The opening brace written by the user is then removed by assigning it as token to a dummy variable.
% If no |{| or |\bgroup| follows the next token is taken as sole content.
%    \begin{macrocode}
\def\collectbox@#1#2#3{%
    \begingroup
    \leavevmode
    \@temptokena{#3\collectbox@end#2\endgroup}%
    \setbox\collectedbox\hbox\bgroup
       \color@setgroup
       #1\bgroup
       \aftergroup\the
       \aftergroup\@temptokena
       \@ifnextchar\bgroup
           {\let\@let@token=}%
           {\collectbox@arg}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\@collectbox}
% Simpler and quicker version.
%    \begin{macrocode}
\def\@collectbox#1{%
    \begingroup
    \leavevmode
    \@temptokena{\collectbox@end#1\endgroup}%
    \setbox\collectedbox\hbox\bgroup
       \color@setgroup\bgroup
       \aftergroup\the
       \aftergroup\@temptokena
       \@ifnextchar\bgroup
           {\let\@let@token=}%
           {\collectbox@arg}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\collectbox@arg}
% Supports |\collectbox{<code>}\somemacro| in addition to
% |\collectbox{<code>}{\somemacro}|. The first following token is read and the inner brace group is closed
% to trigger the |\aftergroup| code.
%    \begin{macrocode}
\def\collectbox@arg#1{%
    #1\egroup
}
%    \end{macrocode}
% \end{macro}
%
%
% \begin{macro}{\collectbox@end}
% The color group is first closed, followed by the closing brace of the |\setbox| command.
% The user dimension macros are then defined. 
% Direct after this code the users code is processed and concluded with a |\endgroup|.
%    \begin{macrocode}
\def\collectbox@end{%
    \color@endgroup
    \egroup
    \def\BOXCONTENT{\usebox\collectedbox}%
    \def\width{\wd\collectedbox}%
    \def\height{\ht\collectedbox}%
    \def\depth{\dp\collectedbox}%
    \let\totalheight\@ovri
    \totalheight\height
    \advance\totalheight\depth
}
%    \end{macrocode}
% \end{macro}
%
%
% \iffalse
%</package>
% \fi
%
% \Finale
\endinput
